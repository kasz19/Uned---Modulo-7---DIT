ID=D0044
URL=http://java.sun.com/docs/books/tutorial/uiswing/components/table.html
SIZE=78471
DATE=16/07/02
TIME=14:35:46
DATASET=Java
HTML=


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>How to Use Tables</title>
<script language="JavaScript">
<!-- hide
function openWin(term) {
  url="../../information/glossary.html#" + term;
  myWin= window.open(url, "Glossary",
              "width=400,height=150,scrollbars=yes,status=no,toolbar=no,menubar=no");
  myWin.focus();
}
//-->
</script>
</head>
<body BGCOLOR="#ffffff" LINK="#000099">
<B><FONT SIZE="-1">The Java</font><sup><font size="-2">TM</font></sup> <font size="-1">Tutorial</FONT></B>
<br>
<table width="550">
<tr>
<td align="left" valign="center">
<a href="spinner.html" target="_top"><img src="../../images/PreviousArrow.gif" width="26" height="26" align="center" border="0" alt="Previous Page"></a>
<a href="../TOC.html#components" target="_top"><img src="../../images/TOCIcon.gif" width="26" height="26" align="center" border="0" alt="Lesson Contents"></a>
<a href="text.html" target="_top"><img src="../../images/NextArrow.gif" width="26" height="26" align="center" border="0" alt="Next Page"></a></td>

<td align="center" valign="center">
<font size="-1">
<a href="../../index.html" target="_top">Start of Tutorial</a>
&gt;
<a href="../index.html" target="_top">Start of Trail</a>
&gt;
<a href="index.html" target="_top">Start of Lesson</a>
</font>
</td>

<td align="right" valign="center">
<font size="-1">
<a href="../../search.html" target="_top">Search</a>
<br><a href="../../forms/sendusmail.html">Feedback Form</a>
</font>
</td>

</tr>
</table>
<img src="../../images/blueline.gif" width="550" height="8" ALIGN="BOTTOM" NATURALSIZEFLAG="3">
<br>

<font size="-1">
<b>Trail</b>: Creating a GUI with JFC/Swing
<br>
<b>Lesson</b>: Using Swing Components
</font>

<h2>
How to Use Tables
</h2>
<blockquote>


With the
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html"><font color="#8800bb"><code>JTable</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> class
you can display tables of data,
optionally allowing the user to edit the data.
<code>JTable</code> doesn't contain or cache data;
it's simply a view of your data.
Here's a picture of a typical table
displayed within a scroll pane:

<p><center><IMG SRC="../../figures/uiswing/components/TableDemo.gif" WIDTH="528" HEIGHT="120" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="A snapshot of TableDemo, which displays a typical table."></center></p>

The rest of this section tells you how to accomplish
some common table-related tasks.
Here are the topics this section covers:

<ul>
<li> <a href="#simple">Creating a Simple Table</a>
<li> <a href="#show">Adding a Table to a Container</a>
<li> <a href="#width">Setting and Changing Column Widths</a>
<li> <a href="#selection">Detecting User Selections</a>
<li> <a href="#data">Creating a Table Model</a>
<li> <a href="#modelchange">Detecting Data Changes</a>
<li> <a href="#editrender">Concepts: Cell Editors and Renderers</a>
<li> <a href="#validtext">Validating User-Entered Text</a>
<li> <a href="#combobox">Using a Combo Box as an Editor</a>
<li> <a href="#editor">Specifying Other Editors</a>
<li> <a href="#custom">Further Customizing Table Display and Event Handling</a>
<li> <a href="#sorting">Sorting and Otherwise Manipulating Data</a>
<li> <a href="#api">The Table API</a>
<li> <a href="#eg">Examples that Use Tables</a>
</ul>

</blockquote>
<h3>
<a name="simple">Creating a Simple Table</a>
</h3>
<blockquote>

<p><center><IMG SRC="../../figures/uiswing/components/SimpleTableDemo.gif" WIDTH="529" HEIGHT="116" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="A snapshot of SimpleTableDemo, which displays a simple table."></center></p>

<blockquote><hr><strong>Try this:</strong>&nbsp;
<ol>
<li> Compile and run <code>SimpleTableDemo</code>.
     The source file is
     
<a target="source" href="example-swing/SimpleTableDemo.java"><font color="#bb000f"><code>SimpleTableDemo.java</code></font></a><a href="example-swing/SimpleTableDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.
     <br>
     See <a href="../start/index.html" target="_top">Getting Started with Swing</a> if you need help compiling or running this application.

<li> Click the cell that contains "Snowboarding".
     <br>
     The entire first row is selected,
     indicating that you have selected Mary Campione's data.
     A special highlight indicates that the "Snowboarding" cell 
     is editable.
     Generally, you begin editing a text cell by double-clicking it.

<li> Position the cursor over "First Name".
     Now press the mouse button
     and drag to the right.
     <br>
     As you can see, 
     users can rearrange columns in tables.
<li> Position the cursor just to the right 
     of a column header.
     Now press the mouse button and drag to the right or left.
     <br>
     The column changes size,
     and the other columns adjust to fill the remaining space.
<li> Resize the window containing the table
     so that it's bigger than necessary to display the whole table.
     <br>
     All the table cells become larger,
     expanding to fill the extra space.
</ol>
<hr></blockquote>

Here is the code that implements
the table in 

<a target="source" href="example-swing/SimpleTableDemo.java"><font color="#bb000f"><code>SimpleTableDemo.java</code></font></a><a href="example-swing/SimpleTableDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>:

<blockquote><pre>
Object[][] data = {
    {"Mary", "Campione", 
     "Snowboarding", new Integer(5), new Boolean(false)},
    {"Alison", "Huml", 
     "Rowing", new Integer(3), new Boolean(true)},
    {"Kathy", "Walrath",
     "Chasing toddlers", new Integer(2), new Boolean(false)},
    {"Mark", "Andrews",
     "Speed reading", new Integer(20), new Boolean(true)},
    {"Angela", "Lih",
     "Teaching high school", new Integer(4), new Boolean(false)}
};

String[] columnNames = {"First Name", 
                        "Last Name",
                        "Sport",
                        "# of Years",
                        "Vegetarian"};

final JTable table = new JTable(data, columnNames);
</pre></blockquote>

The <code>SimpleTableDemo</code> example uses one of two <code>JTable</code>
constructors that directly accept data:

<ul>
<li> <code>JTable(Object[][] rowData, Object[] columnNames)</code>
<li> <code>JTable(Vector rowData, Vector columnNames)</code>
</ul>

The advantage of these constructors 
is that they're easy to use.
However, these constructors also have disadvantages:

<ul>
<li> They automatically make every cell editable.
<li> They treat all data types the same.  
     For example, if a table column has <code>Boolean</code> data,
     the table can display the data in a check box.
     However, if you use one of the two 
     <code>JTable</code> constructors
     listed previously,
     your <code>Boolean</code> data will be displayed as a string.
     You can see this difference
     in the last column of the two previous pictures of tables.
<li> They require that you put all of the table's data
     in an array or vector,
     which isn't appropriate for some data.
     For example, if you're instantiating a set of objects
     from a database,
     you might want to query the objects directly
     for their values,
     rather than copying all their values
     into an array or vector.
</ul>

If you want to get around these restrictions, 
you need to implement your own table model,
as described in <a href="#data">Creating a Table Model</a>.

</blockquote>
<h3>
<a name="show">
Adding a Table to a Container
</a>
</h3>
<blockquote>

It's easy to put a table in a
<a href="scrollpane.html">scroll pane</a>.
You need just one or two lines of code:

<blockquote><pre>
JScrollPane scrollPane = new JScrollPane(table);
table.setPreferredScrollableViewportSize(new Dimension(500, 70));
</pre></blockquote>

The scroll pane automatically gets the table's header,
which displays the column names,
and puts it on top of the table.
Even when the user scrolls down, 
the column names remain visible at the top of the viewing area.
The scroll table also
tries to make its viewing area
the same as the table's
preferred viewing size.
The previous code snippet sets the table's preferred viewing size with the 
<code>setPreferredScrollableViewportSize</code> method.


<blockquote><hr><strong>Version Note:</strong>&nbsp;
Before Swing 1.0.2, 
the scroll pane didn't get the table header
unless you created the scroll pane using the
<code>JTable.createScrollPaneForTable</code> method.
Here are examples of the recommended code,
before and after Swing 1.0.2:
<p>
<pre>
//1.0.1 code (causes deprecation warning
//in 1.0.2 and later releases):
scrollPane = JTable.createScrollPaneForTable(table);
</pre>
</p>

<p>
<pre>
//Recommended code (causes missing column names in 1.0.1):
scrollPane = new JScrollPane(table);
</pre>
</p>
<hr></blockquote>

<p>

If you're using a table without a scroll pane, 
then you must get the table header component
and place it yourself.
For example:

<blockquote><pre>
container.setLayout(new BorderLayout());
container.add(table.getTableHeader(), BorderLayout.NORTH);
container.add(table, BorderLayout.CENTER);
</pre></blockquote>


</blockquote>
<h3>
<a name="width">
Setting and Changing Column Widths
</a>
</h3>
<blockquote>

By default, all columns in a table 
start out with equal width,
and the columns automatically fill the entire width
of the table.
When the table becomes wider or narrower
(which might happen when the user resizes the window containing the table),
all the column widths change appropriately.

<p>

When the user resizes a column by dragging 
its right border,
then either other columns must change size,
or the table's size must change.
By default, the table's size remains the same,
and all columns to the right of the drag point
resize to accommodate space added or removed
from the column to the left of the drag point.

<p>

The following figures illustrate the default resizing behavior.

<p>
<IMG SRC="../../figures/uiswing/components/SimpleTableDemo.gif" WIDTH="529" HEIGHT="116" ALT="SimpleTableDemo"><br>
<b>Initially, the columns have equal width.</b>
</p>

<p>

<IMG SRC="../../figures/uiswing/components/SimpleTableDemo-resize-0.gif" WIDTH="529" HEIGHT="116" ALT="SimpleTableDemo during resizing">

<BR>

<b>When the user resizes a column,
some of the other
columns must adjust size for the table to stay the same size.</b>
</p>

<P>
<IMG SRC="../../figures/uiswing/components/SimpleTableDemo-resize-1.gif" WIDTH="439" HEIGHT="114" ALT="SimpleTableDemo after the entire table is resized"><br>
<b>When the entire table is resized,
all the columns are resized.</b>
</p>

<p>

To customize initial column widths,
you can invoke <code>setPreferredWidth</code>
on each of your table's columns.
This sets both the preferred widths of the columns and
their approximate relative widths.
For example, adding the following code to <code>SimpleTableDemo</code>
makes its third column bigger than the other columns:

<blockquote><pre>
TableColumn column = null;
for (int i = 0; i < 5; i++) {
    column = table.getColumnModel().getColumn(i);
    if (i == 2) {
        column.setPreferredWidth(100); //sport column is bigger
    } else {
        column.setPreferredWidth(50);
    }
}
</pre></blockquote>


<blockquote><hr><strong>Version Note:</strong>&nbsp;
The <code>setPreferredWidth</code> method
was first introduced in Swing 1.1 Beta 2.
For previous releases, you must use <code>setMinWidth</code> instead,
making sure to invoke it on every column.
(Otherwise, 
the columns you miss
will be very thin.)
<hr></blockquote>
<p>

As the preceding code shows,
each column in a table is represented by a
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html"><font color="#8800bb"><code>TableColumn</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> object.
Besides <code>setPreferredWidth</code>,
<code>TableColumn</code> also supplies methods
for getting and setting the minimum, current, and maximum width 
of a column.
For an example of setting cell widths
based on the actual amount of space
needed to draw the cells' contents,
see the <code>initColumnSizes</code> method in 
<a target="source" href="example-swing/TableRenderDemo.java"><font color="#bb000f"><code>TableRenderDemo.java</code></font></a><a href="example-swing/TableRenderDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>, which is discussed in 
<a href="#custom">Further Customizing Table Display and Event Handling</a>.

<p>

When the user explicitly resizes columns,
the new sizes become not only the columns' new <em>current</em> widths,
but also the columns' new <em>preferred</em> widths,
However, when columns are resized as the result of the
table width changing,
the columns' preferred widths do not change.

<p>

You can change a table's resize behavior by invoking
the <code>setAutoResizeMode</code> method.
The method's argument
should have one of these values
(defined as constants in <code>JTable</code>):

<dl>
<dt> <code>AUTO_RESIZE_SUBSEQUENT_COLUMNS</code>
<dd> The default.  
     In addition to resizing the column
     to the left of the drag point,
     adjusts the sizes of all columns to the right of the drag point.
<dt> <code>AUTO_RESIZE_NEXT_COLUMN</code>
<dd> Adjusts only the columns immediately to the left and right
     of the drag point.
<dt> <code>AUTO_RESIZE_OFF</code>
<dd> Adjust the table size instead.
</dl>


<blockquote><hr><strong>Version Note:</strong>&nbsp;
Before the Swing 1.1 Beta release,
the default resize mode was 
<code>AUTO_RESIZE_ALL_COLUMNS</code>.
However, that mode isn't intuitive,
so we changed the default mode
to a mode added in Swing 1.1 Beta:
<code>AUTO_RESIZE_SUBSEQUENT_COLUMNS</code>.
<hr></blockquote>

<p>


</blockquote>
<h3>
<a name="selection">
Detecting User Selections
</a>
</h3>
<blockquote>

The following code snippet
shows how to detect when the user selects a table row.
By default, a table allows the user to select multiple rows --
not columns or individual cells --
and the selected rows need not be next to each other.
Using the
<code>setSelectionMode</code> method,
the following code specifies
that only one row at a time can be selected.
You can find the entire program in

<a target="source" href="example-swing/SimpleTableSelectionDemo.java"><font color="#bb000f"><code>SimpleTableSelectionDemo.java</code></font></a><a href="example-swing/SimpleTableSelectionDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.

<blockquote><pre>
table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
...
ListSelectionModel rowSM = table.getSelectionModel();
rowSM.addListSelectionListener(new ListSelectionListener() {
    public void valueChanged(ListSelectionEvent e) {
        //Ignore extra messages.
        if (e.getValueIsAdjusting()) return;
        
        ListSelectionModel lsm =
            (ListSelectionModel)e.getSource();
        if (lsm.isSelectionEmpty()) {
            <em>...//no rows are selected</em>
        } else {
            int selectedRow = lsm.getMinSelectionIndex();
            <em>...//selectedRow is selected</em>
        }
    }
});
</pre></blockquote>

<p>


<a target="source" href="example-swing/SimpleTableSelectionDemo.java"><font color="#bb000f"><code>SimpleTableSelectionDemo.java</code></font></a><a href="example-swing/SimpleTableSelectionDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
also has code
(not included in the preceding snippet)
that changes the table's selection orientation.
By changing a couple of boolean values,
you can make the table allow either column selections
or individual cell selections,
instead of row selections.

<p>

For more information and examples of
implementing selection,
see <a href="../events/listselectionlistener.html">
How to Write a List Selection Listener</a>.


</blockquote>
<h3>
<a name="data">
Creating a Table Model
</a>
</h3>
<blockquote>

As the following figure shows,
every table gets its data from an object
that implements the 
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableModel.html"><font color="#8800bb"><code>TableModel</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableModel.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> interface.


<p><center><IMG SRC="../../figures/uiswing/components/8model.gif" WIDTH="380" HEIGHT="67" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="TableDemo"></center></p>
The <code>JTable</code> constructor
used by <code>SimpleTableDemo</code>
creates its table model with 
code like this:

<blockquote><pre>
new AbstractTableModel() {
    public String getColumnName(int col) { 
        return columnNames[col].toString(); 
    }
    public int getRowCount() { return rowData.length; }
    public int getColumnCount() { return columnNames.length; }
    public Object getValueAt(int row, int col) { 
        return rowData[row][col]; 
    }
    public boolean isCellEditable(int row, int col)
        { return true; }
    public void setValueAt(Object value, int row, int col) {
        rowData[row][col] = value;
	fireTableCellUpdated(row, col);
    }
}
</pre></blockquote>

As the preceding code shows,
implementing a table model can be simple.
Generally, you implement your table model in a subclass of the
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/AbstractTableModel.html"><font color="#8800bb"><code>AbstractTableModel</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/AbstractTableModel.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> class.  

<p>

Your model might hold its data
in an array, vector, or hashtable,
or it might get the data from an outside source such as a database.
It might even generate the data at execution time.
For examples of getting data from a database,
see the table examples provided as part of the
JFC/Swing and Java 2 Standard Edition SDK releases.

<blockquote><hr><strong>Version Note:</strong>&nbsp;In JFC/Swing-only releases (for use with JDK 1.1) the 
table examples are in the <code>examples/Table</code> directory.
In 1.2, the table examples are in the
<code>demo/jfc/Table</code> directory.
In 1.3, the examples move to the
<code>demo/jfc/TableExamples</code> directory.
In 1.4, the directory is 
<code>demo/jfc/TableExample</code> (no final s).
<hr></blockquote>

<p>

Here again is a picture of a table
implemented by <code>TableDemo</code>,
which has a custom table model:

<p><center><IMG SRC="../../figures/uiswing/components/TableDemo.gif" WIDTH="528" HEIGHT="120" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="A snapshot of TableDemo. Again."></center></p>
This table is different from the <code>SimpleTableDemo</code> table
in the following ways:

<ul>
<li> <code>SimpleTableDemo</code>'s table model,
     having been created automatically by <code>JTable</code>,
     isn't smart enough to know that the <b># of Years</b> column
     contains numbers (which should generally be right aligned).
     It also doesn't know that the <code>Vegetarian</code> column
     contains boolean values,
     which can be represented by check boxes.
     <code>TableDemo</code>'s custom table model,
     even though it's simple,
     can easily determine the data's type,
     helping the <code>JTable</code> display the data in the best format.

<li> In <code>SimpleTableDemo</code>, all cells are editable.
     In <code>TableDemo</code>,
     we implemented the custom table model 
     so that it doesn't let you edit the name columns;
     it does, however, let you edit the other columns.
</ul>

<p>

Below is the code from 

<a target="source" href="example-swing/TableDemo.java"><font color="#bb000f"><code>TableDemo.java</code></font></a><a href="example-swing/TableDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
that is different from the code in 

<a target="source" href="example-swing/SimpleTableDemo.java"><font color="#bb000f"><code>SimpleTableDemo.java</code></font></a><a href="example-swing/SimpleTableDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.
Bold font indicates the code that makes this table's model
different from the table model defined automatically
in <code>SimpleTableDemo</code>.

<blockquote><pre>
public TableDemo() {
    ...
    MyTableModel myModel = new MyTableModel();
    JTable table = new JTable(myModel);
    table.setPreferredScrollableViewportSize(
              new Dimension(500, 70));

    //Create the scroll pane and add the table to it. 
    JScrollPane scrollPane = new JScrollPane(table);

    //Add the scroll pane to this window.
    setContentPane(scrollPane);
    ...
}

class MyTableModel extends AbstractTableModel {
    final String[] columnNames = <em>...//same as before...</em>
    final Object[][] data = <em>...//same as before...</em>

    public int getColumnCount() {
        return columnNames.length;
    }
    
    public int getRowCount() {
        return data.length;
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public Object getValueAt(int row, int col) {
        return data[row][col];
    }

    <b>public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }</b>

    /*
     * Don't need to implement this method unless your table's
     * editable.
     */
    public boolean isCellEditable(int row, int col) {
        //Note that the data/cell address is constant,
        //no matter where the cell appears onscreen.
        <b>if (col < 2) { 
            return false;
        } else {
            return true;
        }</b>
    }

    /*
     * Don't need to implement this method unless your table's
     * data can change.
     */
    public void setValueAt(Object value, int row, int col) {
        <em>...//debugging code not shown...</em>
        <b><em>...//ugly special handling of Integers not shown...</em></b>
        data[row][col] = value;
        fireTableCellUpdated(row, col);
        <em>...//debugging code not shown...</em>
    }
    ...
</pre></blockquote>

</blockquote>
<h3>
<a name="modelchange">
Detecting Data Changes
</a>
</h3>
<blockquote>

A table and its model automatically detect
whenever the user edits the table's data.
However, if the data changes for another reason,
you must take special steps to notify the table 
and its model of the data change.
Also, if you don't implement a table model,
as in <code>SimpleTableDemo</code>,
then you must take special steps
to find out when the user edits the table's data.

<p>

An example of updating a table's data
without directly editing it
is in the BINGO application.
The BINGO application,
which is presented in 
<a target="_top" href="../../together/bingo/index.html">BINGO!</a><a target="_top" href="../../together/bingo/index.html"><img src="../../images/tutorialIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the Creating a GUI with JFC/Swing trail)"></a>, has a table that displays some information
about each user who is signed up to play the game.
When a new user signs up to play BINGO,
the table needs to add a new row for that user.
More precisely, 
the table model needs to get
the data for the new user,
and then the table model needs to tell the table
to display the new data.

<p>

To notify the table model about a new user,
the BINGO application 
invokes the table model's <code>updatePlayer</code> method.
You can see the code for that method in 
<a target="source" href="../../together/bingo/example-swing/bingo/shared/PlayerInfoModel.java"><font color="#bb000f"><code>PlayerInfoModel</code></font></a><a href="../../together/bingo/example-swing/bingo/shared/PlayerInfoModel.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>, which contains the implementation of the table model.
The <code>updatePlayer</code> method records the new user's data
and fires a table-model event.
Because every table listens for table-model events
from its model,
the user-information table automatically detects the change
and displays the new data.

<p>

To fire the table-model event,
the model invokes the <code>fireTableRowsInserted</code> method,
which is defined by the <code>AbstractTableModel</code> class.
Other <code>fire<em>Xxxx</em></code> methods that
<code>AbstractTableModel</code> defines 
to help you fire table-model events are
<code>fireTableCellUpdated</code>,
<code>fireTableChanged</code>,
<code>fireTableDataChanged</code>,
<code>fireTableRowsDeleted</code>,
<code>fireTableRowsInserted</code>,
<code>fireTableRowsUpdated</code>, and
<code>fireTableStructureChanged</code>.

<p>

If you have a class such as <code>SimpleTableDemo</code>
that isn't a table or table model,
but needs to react to changes in a table model,
then you need to do something special
to find out when the user edits the table's data.
Specifically, you need to register
a table-model listener on the table model.
Adding the bold code in the following snippet
makes <code>SimpleTableDemo</code> 
react to table data changes.

<blockquote><pre>
public class SimpleTableDemo ... <b>implements TableModelListener </b>{
    ...
    public SimpleTableDemo() {
        ...
	<b>model = table.getModel();
        model.addTableModelListener(this);</b>
        ...
    }

    <b>public void tableChanged(TableModelEvent e) {
        ...
        int row = e.getFirstRow();
        int column = e.getColumn();
        String columnName = model.getColumnName(column);
        Object data = model.getValueAt(row, column);

        <em>...// Do something with the data...</em></b>
    }
    ...
}
</pre></blockquote>

<p>

</blockquote>
<h3>
<a name="editrender">
Concepts: Cell Editors and Renderers
</a>
</h3>
<blockquote>

Before you go on to the next few tasks,
you need to understand how tables draw their cells.
You might expect each cell in a table to be a component.
However, for performance reasons, 
Swing tables aren't implemented that way.

<p>

Instead, a single 
<em>cell renderer</em>
is used to draw all of the cells in a column.
Often, this cell renderer is shared between all columns
that contain the same type of data.
You can think of the renderer as a
configurable ink stamp
that the table uses to 
stamp appropriately formatted data onto each cell.
When the user starts to edit a cell's data,
a <em>cell editor</em>
takes over the cell,
controlling the cell's editing behavior.

<p>

For example, each cell in the <b># of Years</b> column in <code>TableDemo</code>
contains <code>Number</code> data  --
specifically, an <code>Integer</code> object.
By default, the cell renderer for a <code>Number</code>-containing column  
uses a single <code>JLabel</code> instance 
to draw the appropriate numbers, right-aligned,
on the column's cells.
If the user begins editing one of the cells,
the default cell editor 
uses a right-aligned <code>JTextField</code>
to control the cell editing.

<p>

To choose the renderer that displays
the cells in a column,
a table first determines whether the you specified
a renderer for that particular column.
(We'll tell you how to specify renderers a bit later.)
If you didn't, 
then the table invokes the table model's <code>getColumnClass</code> method,
which gets the data type of the column's cells.
Next, the table compares the column's data type 
with a list of data types for which cell renderers are registered.
This list is initialized by the table, 
but you can add to it or change it.
Currently, tables put the following
types of data in the list:

<ul>
<li> <code>Boolean</code> -- rendered with a check box.
<li> <code>Number</code> -- rendered by a right-aligned label.
<li> <code>ImageIcon</code> -- rendered by a centered label.
<li> <code>Object</code> -- rendered by a label that displays the object's
string value.
</ul> 

<p>

The table chooses cell editors using a similar algorithm.

<p>

Remember that if you let a table
create its own model,
it uses <code>Object</code> 
as the type of every column.

<a target="source" href="example-swing/TableDemo.java"><font color="#bb000f"><code>TableDemo.java</code></font></a><a href="example-swing/TableDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
shows how to specify more precise column types.

<p>


The next few sections tell you how
to customize cell display and editing
by specifying cell renderers and editors
either by column or by data type,


</blockquote>
<h3>
<a name="validtext">
Validating User-Entered Text
</a>
</h3>
<blockquote>
In the table examples you've seen so far,
the user can enter any text into the <b># of Years</b> column.
<code>SimpleTableDemo</code> doesn't check the data's value, at all.
The <code>TableDemo</code> example is slightly improved 
in that when the user is done editing,
the code checks whether the entry can be parsed as an integer.
However, <code>TableDemo</code> must use a bit of ugly code
to convert the string returned by the default cell editor
into an <code>Integer</code>.
If it didn't do the conversion, 
then the actual type of the data 
would change from <code>Integer</code> to <code>String</code>.

<blockquote><hr><strong>Version Note:</strong>&nbsp;As of 1.3, the ugly conversion code is unnecessary
because the default text cell editor automatically converts
the data into the proper type.
<hr></blockquote>

<p>

What we'd really like to do 
is to check the user's input 
<em>while</em> the user is typing,
and to have the cell editor return an 
<code>Integer</code> instead of a string.
You can accomplish one or both of these tasks
by using a custom text field
to control the cell editing.

<p>

A custom text field 
can check the user's input either
while the user is typing,
or after the user has indicated the end of typing
(such as by pressing return).
We call these two types of checking
<em>change</em>-validation
and <em>action</em>-validation,
respectively.

<p>

The following code, taken from 

<a target="source" href="example-swing/TableEditDemo.java"><font color="#bb000f"><code>TableEditDemo.java</code></font></a><a href="example-swing/TableEditDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>,
sets up a change-validated text field.
The bold line of code makes the text field
the editor for all columns
that contain data of type <code>Integer</code>.

<blockquote><pre>
final WholeNumberField integerField = new WholeNumberField(0, 5);
integerField.setHorizontalAlignment(WholeNumberField.RIGHT);

DefaultCellEditor integerEditor = 
    new DefaultCellEditor(integerField) {
        //Override DefaultCellEditor's getCellEditorValue method
        //to return an Integer, not a String:
        public Object getCellEditorValue() {
            return new Integer(integerField.getValue());
        }
    };
<b>table.setDefaultEditor(Integer.class, integerEditor);</b>
</pre></blockquote>

The 
<a target="source" href="example-swing/WholeNumberField.java"><font color="#bb000f"><code>WholeNumberField</code></font></a><a href="example-swing/WholeNumberField.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
class used above is a custom <code>JTextField</code>
subclass that allows the user to enter only digits.
The <code>getValue</code> method
returns the <code>int</code> value of the <code>WholeNumberField</code>'s
contents.
See <a href="textfield.html">How to Use Text Fields</a>
for more information about <code>WholeNumberField</code>.
That section also provides
a more general-purpose validating text field,
called <code>DecimalField</code>,
that you can customize so that it validates
any number format that you specify.


</blockquote>
<h3>
<a name="combobox">
Using a Combo Box as an Editor
</a>
</h3>
<blockquote>

Here is an example of setting up a combo box editor.
The bold line of code
sets up the combo box as the editor for a column,
rather than for a specific data type.

<blockquote><pre>
TableColumn sportColumn = table.getColumnModel().getColumn(2);
...
JComboBox comboBox = new JComboBox();
comboBox.addItem("Snowboarding");
comboBox.addItem("Rowing");
comboBox.addItem("Chasing toddlers");
comboBox.addItem("Speed reading");
comboBox.addItem("Teaching high school");
comboBox.addItem("None");
<b>sportColumn.setCellEditor(new DefaultCellEditor(comboBox));</b>
</pre></blockquote>

Here is a picture of the combo box editor in use:

<p><center><IMG SRC="../../figures/uiswing/components/TableRenderDemo.gif" WIDTH="529" HEIGHT="159" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="A combo box cell editor in use"></center></p>
The combo box editor is implemented in

<a target="source" href="example-swing/TableRenderDemo.java"><font color="#bb000f"><code>TableRenderDemo.java</code></font></a><a href="example-swing/TableRenderDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>, 
which is discussed some more in
<a href="#custom">Further Customizing Table Display and Event Handling</a>.


</blockquote>
<h3>
<a name="editor">
Specifying Other Editors
</a>
</h3>
<blockquote>

As the previous sections showed,
you can set the editor for an entire column
using the <code>TableColumn</code> <code>setCellEditor</code> method,
or for a specific type of data 
using the <code>JTable</code>
<code>setDefaultEditor</code> method.
For both methods,
you must specify an argument that implements the <code>TableCellEditor</code>
interface.
Fortunately, the <code>DefaultCellEditor</code> class
implements this interface and provides
constructors to let you specify an editing component
that's a <code>JTextField</code>,
<code>JCheckBox</code>, or
<code>JComboBox</code>.
You usually don't have to explicitly specify a check box as an editor,
since columns with <code>Boolean</code> data
automatically use a check box renderer and editor.

<p>

What if you want to specify an editor 
that isn't a text field, check box, or combo box?
Well, because <code>DefaultCellEditor</code> 
doesn't support other types of components,
you must do a little more work.
You need to create a subclass of the desired editor component,
and the subclass must implement the
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellEditor.html"><font color="#8800bb"><code>TableCellEditor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellEditor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> interface.
Then you set up the component as an editor 
for a data type or column,
using the 
<code>setDefaultEditor</code> or
<code>setCellEditor</code>
method, respectively.

<p>

<blockquote><hr><strong>Version Note:</strong>&nbsp;The <code>AbstractCellEditor</code> class, which was added in 1.3,
makes it much easier to add support for non-standard editor components.
We plan to add an example of using it.
For now,
you can find information in
the <a href="http://java.sun.com/products/jdk/1.3/docs/guide/swing/JTableChanges.html">JTable</a> release document
and the API documentation for 
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/AbstractCellEditor.html"><font color="#8800bb"><code>AbstractCellEditor</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/AbstractCellEditor.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>.
<hr></blockquote>

<p>

Here is a picture of a table with a dialog that
serves, indirectly, as a cell editor.
When the user begins editing a cell in the <b>Favorite Color</b> column,
a button (the true cell editor) appears and
brings up the dialog,
with which the user can choose a different color.

<p><center><IMG SRC="../../figures/uiswing/components/TableDialogEditDemo.gif" WIDTH="646" HEIGHT="232" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="The cell editor brings up a dialog "></center></p>
You can find the code in 

<a target="source" href="example-swing/TableDialogEditDemo.java"><font color="#bb000f"><code>TableDialogEditDemo.java</code></font></a><a href="example-swing/TableDialogEditDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.
The example also requires

<a target="source" href="example-swing/WholeNumberField.java"><font color="#bb000f"><code>WholeNumberField.java</code></font></a><a href="example-swing/WholeNumberField.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.

<p>


</blockquote>
<h3>
<a name="custom">
Further Customizing Table Display and Event Handling
</a>
</h3>
<blockquote>

You've already seen how to specify cell <em>editors</em>.
You can also specify <em>renderers</em> for cells
and for column headers.
Customizing renderers lets you 
display data in custom ways
and specify tool tip text
for the table to display.

<p>

Although renderers determine how each cell or column header looks,
they don't handle events.
To pick up the events that take place inside a table,
you should choose the appropriate technique
for the sort of event you're interested in.
For a cell that's being edited,
the editor should process events.
To detect row/column/cell selections and deselections,
use a selection listener as described in
<a href="#selection">Detecting User Selections</a>.
To detect mouse clicks on a column header,
you can register a mouse listener on the table header.
(See 
<a target="source" href="example-swing/TableSorter.java"><font color="#bb000f"><code>TableSorter.java</code></font></a><a href="example-swing/TableSorter.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
for an example.)
To detect other events, 
you can register the appropriate listener
on the <code>JTable</code> object.

<p>

Creating a custom renderer can be as easy
as creating a subclass of an existing
component and then implementing the single method
in the
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellRenderer.html"><font color="#8800bb"><code>TableCellRenderer</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellRenderer.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> interface.
In the preceding figure, the color renderer 
used for <b>Favorite Color</b> cells
is a subclass of <code>JLabel</code>.
You can find the code for the renderer
in the <code>ColorRenderer</code> inner class
in 

<a target="source" href="example-swing/TableDialogEditDemo.java"><font color="#bb000f"><code>TableDialogEditDemo.java</code></font></a><a href="example-swing/TableDialogEditDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.
Here is the code that registers a <code>ColorRenderer</code> instance
as the default renderer for all 
<code>Color</code> data:

<blockquote><pre>
table.setDefaultRenderer(Color.class, new ColorRenderer(true));
</pre></blockquote>

You can even specify a
cell-specific renderer, if you like.
To do this, you need to define a <code>JTable</code> subclass
that overrides the
<code>getCellRenderer</code> method.
For example, 
the following code makes the first cell
in the first column of the table
use a custom renderer:

<blockquote><pre>
TableCellRenderer weirdRenderer = new WeirdRenderer();
table = new JTable(...) {
    public TableCellRenderer getCellRenderer(int row, int column) {
	if ((row == 0) && (column == 0)) {
	    return weirdRenderer;
	}
	// else...
	return super.getCellRenderer(row, column);
    }
};
</pre></blockquote>

<p>


<p>

To add tool tips to cells or column headers, 
you need to get or create the cell or header renderer,
and then use the <code>setToolTipText</code> method
of the renderer's component.

<a target="source" href="example-swing/TableRenderDemo.java"><font color="#bb000f"><code>TableRenderDemo.java</code></font></a><a href="example-swing/TableRenderDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
adds tool tips
to both the cells and header for the <b>Sport</b> column
with the following code:

<blockquote><pre>
//Set up tool tips for the sport cells.
DefaultTableCellRenderer renderer =
        new DefaultTableCellRenderer();
renderer.setToolTipText("Click for combo box");
sportColumn.setCellRenderer(renderer);

//Set up tool tip for the sport column header.
<font color="red">TableCellRenderer headerRenderer = sportColumn.getHeaderRenderer();</font>
if (headerRenderer instanceof DefaultTableCellRenderer) {
    ((DefaultTableCellRenderer)headerRenderer).setToolTipText(
             "Click the sport to see a list of choices");
} 
</pre></blockquote>

<a name="13defaultheaderrenderer"> <!-- --> </a>
<blockquote><hr><strong>Version Note:</strong>&nbsp;As of 1.3,
the <code>getHeaderRenderer</code> method
returns <code>null</code> by default.
To find the default header renderer,
you instead use the new 
<code>getDefaultRenderer</code> method,
which is defined in <code>JTableHeader</code>.
For example,
in the preceding snippet the red-colored code 
should be changed to this:

<blockquote><pre>
TableCellRenderer headerRenderer = table.getTableHeader().
        getDefaultRenderer();
</pre></blockquote>

You can find the 1.3 version of <code>TableRenderDemo.java</code> in
<a target="source" href="example-1dot3/TableRenderDemo.java"><font color="#bb000f"><code>example-1dot3/TableRenderDemo.java</code></font></a><a href="example-1dot3/TableRenderDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.
<hr></blockquote>

<p>

An interesting feature of <code>TableRenderDemo</code>
is how it determines the sizes of its columns.
For each column,
<code>TableRenderDemo</code> gets the components used to render
that column's header and cells.
It then asks the components
how much space they need.
Finally, it uses the space information to set the column's width.


<blockquote><pre>
TableColumn column = null;
Component comp = null;
int headerWidth = 0;
int cellWidth = 0;
Object[] longValues = model.longValues;

for (int i = 0; i < 5; i++) {
    column = table.getColumnModel().getColumn(i);

    comp = <font color="red">column.getHeaderRenderer()</font>.
                     getTableCellRendererComponent(
                         null, column.getHeaderValue(), 
                         false, false, 0, 0);
    headerWidth = comp.getPreferredSize().width;

    comp = table.getDefaultRenderer(model.getColumnClass(i)).
                     getTableCellRendererComponent(
                         table, longValues[i],
                         false, false, 0, i);
    cellWidth = comp.getPreferredSize().width;
    <em>...//debugging code not shown...</em>
    column.setPreferredWidth(Math.max(headerWidth, cellWidth));
}

<em>...//In the model:</em>
public final Object[] longValues = {"Angela", "Andrews", 
                                    "Teaching high school",
                                    new Integer(20), Boolean.TRUE};
</pre></blockquote>
<blockquote><hr><strong>Version Note:</strong>&nbsp;Because the 1.3 <code>getHeaderRenderer</code> method
returns <code>null</code> by default,
you generally use the 1.3 
<code>getDefaultRenderer</code> method instead.
For example, the red code from the previous snippet
would be replaced with this:

<blockquote><pre>
    table.getTableHeader().getDefaultRenderer()
</pre></blockquote>

You can find the 1.3 version of <code>TableRenderDemo.java</code> in
<a target="source" href="example-1dot3/TableRenderDemo.java"><font color="#bb000f"><code>example-1dot3/TableRenderDemo.java</code></font></a><a href="example-1dot3/TableRenderDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.

<hr></blockquote>


</blockquote>
<h3>
<a name="sorting">
Sorting and Otherwise Manipulating Data
</a>
</h3>
<blockquote>
One way to perform data manipulation such as sorting
is to use one or more specialized table models
(<em>data manipulators</em>),
in addition to the table model that provides the data
(the data model).
The data manipulators
should sit between the table
and the data model,
as the following picture shows:

<p><center><IMG SRC="../../figures/uiswing/components/9model.gif" WIDTH="474" HEIGHT="57" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="A data manipulator sits between a table and its model."></center></p>

You can use the <code>TableMap</code> and <code>TableSorter</code> classes
when implementing your data manipulator.

<a target="source" href="example-swing/TableMap.java"><font color="#bb000f"><code>TableMap.java</code></font></a><a href="example-swing/TableMap.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
implements <code>TableModel</code> 
and serves as a superclass for data manipulators.

<a target="source" href="example-swing/TableSorter.java"><font color="#bb000f"><code>TableSorter.java</code></font></a><a href="example-swing/TableSorter.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
is a <code>TableMap</code> subclass
that sorts the data provided by another table model.
You can either 
change these classes,
using them as a basis for writing your own data manipulator,
or use the classes
as-is to provide sorting functionality.

<p>

To implement sorting
with <code>TableSort</code>,
you need just three lines of code.
The following listing
shows the differences between <code>TableDemo</code>
and its sorting cousin, 

<a target="source" href="example-swing/TableSorterDemo.java"><font color="#bb000f"><code>TableSorterDemo.java</code></font></a><a href="example-swing/TableSorterDemo.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>.

<blockquote><pre>
<B>TableSorter sorter = new TableSorter(myModel); //ADDED THIS</b>
//JTable table = new JTable(myModel);          //OLD
<b>JTable table = new JTable(sorter);             //NEW</b>
<b>sorter.addMouseListenerToHeaderInTable(table); //ADDED THIS</b>
</pre></blockquote>

The <code>addMouseListenerToHeaderInTable</code> method
adds a mouse listener that detects clicks
over the column headers.
When the listener detects a click,
it sorts the rows based on the clicked column.
As the following snapshot shows,
when you click "Last Name",
the rows are reordered so that the row with "Andrews"
becomes the first row.
When you Shift-click a column header, 
the rows are sorted in reverse order. 

<p><center><IMG SRC="../../figures/uiswing/components/TableSorterDemo.gif" WIDTH="529" HEIGHT="120" ALIGN="BOTTOM" NATURALSIZEFLAG="3" ALT="TableSorterDemo after clicking Last Name"></center></p>
</blockquote>
<h3>
<a name="api">The Table API</a>
</h3>
<blockquote>

The tables in this section
cover just part of the table API.
For more information about the table API,
see the API documentation for 
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html"><font color="#8800bb"><code>JTable</code></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a> and for the various classes and interfaces in the
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/package-summary.html"><font color="#8800bb">table package</font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/package-summary.html"><img src="../../images/apiIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in the API reference documentation)"></a>.
Also see <a href="jcomponent.html">The JComponent Class</a>,
which describes the API that <code>JTable</code> inherits
from <code>JComponent</code>.
The API for using tables falls into the following categories:

<ul>
<li><a href="#overviewapi">Table-Related Classes and Interfaces</a>
<li><a href="#creatingapi">Creating and Setting Up a Table</a>
<li><a href="#columnapi">Manipulating Columns</a>
<li><a href="#editrenderapi">Using Editors and Renderers</a>
<li><a href="#selectionapi">Implementing Selection</a>
</ul>

<p>
<table border=1> 
<caption><a name="overviewapi">Table-Related Classes and Interfaces</a></caption>
<tr>
<th align=left>Class/Interface
</th>
<th align=left>Purpose
 
</th>
</tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html"><font color="#8800bb"><font size=2><code>JTable</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html"></a>    </td>
    <td>The component that presents the table to the user.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/JTableHeader.html"><font color="#8800bb"><font size=2><code>JTableHeader</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/JTableHeader.html"></a>    </td>
    <td>The component that presents the column names to the user.
        By default, the table generates this component automatically.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableModel.html"><font color="#8800bb"><font size=2><code>TableModel</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableModel.html"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/AbstractTableModel.html"><font color="#8800bb"><font size=2><code>AbstractTableModel</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/AbstractTableModel.html"></a>    </td>
    <td>Respectively, the interface that a table model must implement
        and the usual superclass for table model implementations.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellRenderer.html"><font color="#8800bb"><font size=2><code>TableCellRenderer</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellRenderer.html"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/DefaultTableCellRenderer.html"><font color="#8800bb"><font size=2><code>DefaultTableCellRenderer</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/DefaultTableCellRenderer.html"></a>    </td>
    <td>Respectively, the interface that a table cell renderer must implement
        and the usual implementation used.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellEditor.html"><font color="#8800bb"><font size=2><code>TableCellEditor</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableCellEditor.html"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/DefaultCellEditor.html"><font color="#8800bb"><font size=2><code>DefaultCellEditor</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/DefaultCellEditor.html"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/AbstractCellEditor.html"><font color="#8800bb"><font size=2><code>AbstractCellEditor</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/AbstractCellEditor.html"></a>    </td>
    <td>Respectively, the interface that a table cell editor must implement,
        the usual implementation used,
	and the usual superclass for table cell editor implementations.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumnModel.html"><font color="#8800bb"><font size=2><code>TableColumnModel</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumnModel.html"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/DefaultTableColumnModel.html"><font color="#8800bb"><font size=2><code>DefaultTableColumnModel</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/DefaultTableColumnModel.html"></a>    </td>
    <td>Respectively, the interface that a table column model must implement
        and the usual implementation used.
        You don't usually need to deal with the table column model directly
        unless you need to get the column selection model,
        or get a column index or object.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html"><font color="#8800bb"><font size=2><code>TableColumn</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html"></a>    </td>
    <td>Controls all the attributes of a table column,
        including resizability;
        minimum, preferred, current, and maximum widths;
        and an optional column-specific renderer/editor.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/DefaultTableModel.html"><font color="#8800bb"><font size=2><code>DefaultTableModel</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/DefaultTableModel.html"></a>    </td>
    <td>A <code>Vector</code>-based table model used by <code>JTable</code>
        when you construct a table specifying no data model 
        and no data.

    </td>
  </tr>
</table>

<p>
<table border=1> 
<caption><a name="creatingapi">Creating and Setting Up a Table</a></caption>
<tr>
<th align=left><code>JTable</code> Constructor/Method
</th>
<th align=left>Purpose
 
</th>
</tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(javax.swing.table.TableModel)"><font color="#8800bb"><font size=2><code>JTable(TableModel)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(javax.swing.table.TableModel)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel)"><font color="#8800bb"><font size=2><code>JTable(TableModel, TableColumnModel)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel)"><font color="#8800bb"><font size=2><code>JTable(TableModel, TableColumnModel, ListSelectionModel)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable()"><font color="#8800bb"><font size=2><code>JTable()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable()"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(int, int)"><font color="#8800bb"><font size=2><code>JTable(int, int)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(int, int)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(java.lang.Object[][], java.lang.Object[])"><font color="#8800bb"><font size=2><code>JTable(Object[][], Object[])</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(java.lang.Object[][], java.lang.Object[])"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(java.util.Vector, java.util.Vector)"><font color="#8800bb"><font size=2><code>JTable(Vector, Vector)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#JTable(java.util.Vector, java.util.Vector)"></a>    </td>
    <td>Create a table.
        The optional <code>TableModel</code> argument 
        specifies the model that provides the data to the table.
        The optional <code>TableColumnModel</code> and 
        <code>ListSelectionModel</code> arguments
        let you specify the table column model 
        and the row selection model.
        As an alternative to specifying a table model, 
        you can supply data and column names,
        using arrays or vectors.
        Another option is to specify no data,
        optionally specifying the number of rows and columns (both integers)
        to be in the table.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setPreferredScrollableViewportSize(java.awt.Dimension)"><font color="#8800bb"><font size=2><code>void setPreferredScrollableViewportSize(Dimension)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setPreferredScrollableViewportSize(java.awt.Dimension)"></a>    </td>
    <td>Set the size of the visible part of the table
        when it's viewed within a scroll pane.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#getTableHeader()"><font color="#8800bb"><font size=2><code>JTableHeader getTableHeader()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#getTableHeader()"></a>    </td>
    <td>Get the component that displays the column names.
    </td>
  </tr>
</table>

<p>
<table border=1> 
<caption><a name="columnapi">Manipulating Columns</a></caption>
<tr>
<th align=left>Constructor/Method
</th>
<th align=left>Purpose
 
</th>
</tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#getColumnModel()"><font color="#8800bb"><font size=2><code>TableColumnModel getColumnModel()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#getColumnModel()"></a>    <br>
    <em>(in <code>JTable</code>)
    </td>
    <td>Get the table's column model.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumnModel.html#getColumn(int)"><font color="#8800bb"><font size=2><code>TableColumn getColumn(int)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumnModel.html#getColumn(int)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumnModel.html#getColumns()"><font color="#8800bb"><font size=2><code>Enumeration getColumns()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumnModel.html#getColumns()"></a>    <br>
    <em>(in <code>TableColumnModel</code>)
    </td>
    <td>Get one or all of the <code>TableColumn</code> objects for the table. 

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setMinWidth(int)"><font color="#8800bb"><font size=2><code>void setMinWidth(int)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setMinWidth(int)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setPreferredWidth(int)"><font color="#8800bb"><font size=2><code>void setPreferredWidth(int)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setPreferredWidth(int)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setMaxWidth(int)"><font color="#8800bb"><font size=2><code>void setMaxWidth(int)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setMaxWidth(int)"></a>    <br>
    <em>(in <code>TableColumn</code>)
    </td>
    <td>Set the minimum, preferred, or maximum
        width of the column.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getMinWidth()"><font color="#8800bb"><font size=2><code>int getMinWidth()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getMinWidth()"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getPreferredWidth()"><font color="#8800bb"><font size=2><code>int getPreferredWidth()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getPreferredWidth()"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getMaxWidth()"><font color="#8800bb"><font size=2><code>int getMaxWidth()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getMaxWidth()"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getWidth()"><font color="#8800bb"><font size=2><code>int getWidth()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getWidth()"></a>    <br>
    <em>(in <code>TableColumn</code>)
    </td>
    <td>Get the minimum, preferred, maximum, or current
        width of the column.
    </td>
  </tr>
</table>

<p>
<table border=1> 
<caption><a name="editrenderapi">Using Editors and Renderers</a></caption>
<tr>
<th align=left>Method
</th>
<th align=left>Purpose
</th>
</tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class, javax.swing.table.TableCellRenderer)"><font color="#8800bb"><font size=2><code>void setDefaultRenderer(Class, TableCellRenderer)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setDefaultRenderer(java.lang.Class, javax.swing.table.TableCellRenderer)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setDefaultEditor(java.lang.Class, javax.swing.table.TableCellEditor)"><font color="#8800bb"><font size=2><code>void setDefaultEditor(Class, TableCellEditor)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setDefaultEditor(java.lang.Class, javax.swing.table.TableCellEditor)"></a>    <br>
    <em>(in <code>JTable</code>)
    </td>
    <td>Set the renderer or editor 
        used, by default, for all cells in all columns
        that return objects of the specified type.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setCellRenderer(javax.swing.table.TableCellRenderer)"><font color="#8800bb"><font size=2><code>void setCellRenderer(TableCellRenderer)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setCellRenderer(javax.swing.table.TableCellRenderer)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setCellEditor(javax.swing.table.TableCellEditor)"><font color="#8800bb"><font size=2><code>void setCellEditor(TableCellEditor)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#setCellEditor(javax.swing.table.TableCellEditor)"></a>    <br>
    <em>(in <code>TableColumn</code>)
    </td>
    <td>Set the renderer or editor 
        used for all cells in this column.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getHeaderRenderer()"><font color="#8800bb"><font size=2><code>TableCellRenderer getHeaderRenderer()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/TableColumn.html#getHeaderRenderer()"></a>    <br>
    <em>(in <code>TableColumn</code>)
    </td>
    <td>Get the header renderer for this column.

<p>
<strong>Version Note:</strong>&nbsp;	As of 1.3, this method returns <code>null</code>
	if the column uses the default renderer.
	You generally use <code>getDefaultRenderer</code> instead.
    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/JTableHeader.html#getDefaultRenderer()"><font color="#8800bb"><font size=2><code>TableCellRenderer getDefaultRenderer()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/table/JTableHeader.html#getDefaultRenderer()"></a>    <br>
    <em>(in <code>JTableHeader</code>)
    </td>
    <td>Get the header renderer used
	when none is defined by a table column.
	Introduced in 1.3.
    </td>
  </tr>
</table>
<p>
<table border=1> 
<caption><a name="selectionapi">Implementing Selection</a></caption>
<tr>
<th align=left><code>JTable</code> Method
</th>
<th align=left>Purpose
 
</th>
</tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setSelectionMode(int)"><font color="#8800bb"><font size=2><code>void setSelectionMode(int)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setSelectionMode(int)"></a>    </td>
    <td>Set the selection intervals allowed in the table.
        Valid values are defined in 
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/ListSelectionModel.html"><font color="#8800bb"><font size=2><code>ListSelectionModel</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/ListSelectionModel.html"></a>        as <code>SINGLE_SELECTION</code>,
        <code>SINGLE_INTERVAL_SELECTION</code>,
        and <code>MULTIPLE_INTERVAL_SELECTION</code> (the default).
    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setSelectionModel(javax.swing.ListSelectionModel)"><font color="#8800bb"><font size=2><code>void setSelectionModel(ListSelectionModel)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setSelectionModel(javax.swing.ListSelectionModel)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#getSelectionModel()"><font color="#8800bb"><font size=2><code>ListSelectionModel getSelectionModel()</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#getSelectionModel()"></a>    </td>
    <td>Set or get the model used to control row selections.

    </td>
  </tr>
  <tr>
    <td>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setRowSelectionAllowed(boolean)"><font color="#8800bb"><font size=2><code>void setRowSelectionAllowed(boolean)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setRowSelectionAllowed(boolean)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setColumnSelectionAllowed(boolean)"><font color="#8800bb"><font size=2><code>void setColumnSelectionAllowed(boolean)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setColumnSelectionAllowed(boolean)"></a>    <br>
<a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setCellSelectionEnabled(boolean)"><font color="#8800bb"><font size=2><code>void setCellSelectionEnabled(boolean)</code></font></font></a><a target="apidoc" href="http://java.sun.com/j2se/1.4/docs/api/javax/swing/JTable.html#setCellSelectionEnabled(boolean)"></a>    </td>
    <td>Set the table's selection orientation.
        The boolean argument specifies whether
        that particular type of selection is allowed.
        By default, row selection is allowed,
        and column and cell selection are not.
    </td>
  </tr>
</table>

<p>


</blockquote>
<h3>
<a name="eg">Examples that Use Tables</a>
</h3>
<blockquote>
This table lists examples that use <code>JTable</code>
and where those examples are described.
<p>
<table>
<tr>
<th align=left> Example
</th>
<th align=left> Where Described
</th>
<th align=left> Notes

</th>
</tr>
<tr>
<td> <a href="example-swing/index.html#SimpleTableDemo"><code>SimpleTableDemo</code></a>
</td>
<td> <a href="#simple">Creating a Simple Table</a>
</td>
<td> A basic table with <em>no</em> custom model.
     Does not include code to 
     <a href="#width">specify column widths</a> or
     <a href="#modelchange">detect user editing</a>.

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#SimpleTableSelectionDemo"><code>SimpleTable-
<br>
SelectionDemo</code></a>
</td>
<td> <a href="#selection">Detecting User Selections</a>
</td>
<td> Adds single selection and selection detection to <code>SimpleTableDemo</code>.
     By modifying the program's <code>ALLOW_COLUMN_SELECTION</code>
     and <code>ALLOW_ROW_SELECTION</code> constants,
     you can experiment with alternatives to the table default 
     of allowing only rows to be selected.

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#TableDemo"><code>TableDemo</code></a>
</td>
<td> <a href="#data">Creating a Table Model</a>
</td>
<td> A basic table with a custom model.

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#TableEditDemo"><code>TableEditDemo</code></a>,
     
<a target="source" href="example-swing/WholeNumberField.java"><font color="#bb000f"><code>WholeNumberField.java</code></font></a><a href="example-swing/WholeNumberField.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
</td>
<td> <a href="#validtext">Validating User-Entered Text</a>
</td>
<td> Modifies <code>TableDemo</code> to use a custom editor 
     (a text field variant) for all <code>Integer</code> data.

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#TableRenderDemo"><code>TableRenderDemo</code></a>
</td>
<td> <a href="#combobox">Using a Combo Box as an Editor</a>,
     <a href="#custom">Further Customizing Table Display and Event Handling</a>
</td>
<td> Modifies <code>TableDemo</code> to use a custom editor 
     (a combo box) for all data in the <b>Sport</b> column.
     Also intelligently picks column sizes.
     Uses renderers to display tool tips for the <b>Sport</b> column
     (both cells and header).

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#TableDialogEditDemo"><code>TableDialogEditDemo</code></a>,
     
<a target="source" href="example-swing/WholeNumberField.java"><font color="#bb000f"><code>WholeNumberField.java</code></font></a><a href="example-swing/WholeNumberField.java"><img src="../../images/sourceIcon.gif" width=11 height=11 border=0 align="ABSMIDDLE" alt="(in a .java source file)"></a>
</td>
<td> <a href="#editor">Specifying Other Editors</a>
</td>
<td> Modifies <code>TableEditDemo</code> 
     to have a cell renderer and editor that 
     display a color and let you choose a new one,
     using a color chooser dialog.

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#TableSorterDemo"><code>TableSorterDemo</code></a>
</td>
<td> <a href="#sorting">Sorting and Otherwise Manipulating Data</a>
</td>
<td> Sorts column data by interposing a data manipulating table model
     between the data model and the table.
     Detects user clicks on column headers.

</td>
</tr>
<tr>
<td> <a href="../events/example-swing/index.html#ListSelectionDemo"><code>ListSelectionDemo</code></a>
</td>
<td> <a href="../events/listselectionlistener.html">
     How to Write a List Selection Listener</a>
</td>
<td> Shows how to use all list selection modes,
     using a list selection listener that's shared
     between a table and list.

</td>
</tr>
<tr>
<td> <a href="example-swing/index.html#SharedModelDemo"><code>SharedModelDemo</code></a>
</td>
<td> Nowhere
</td>
<td> Builds on <code>ListSelectionDemo</code>
     making the data model be shared between the table and list.
     If you edit an item in the first column of the table,
     the new value is reflected in the list.

</td>
</tr>
<tr>
<td> TreeTable, TreeTable II
</td>
<td> <a
href="http://java.sun.com/products/jfc/tsc/articles/treetable1/index.html">Creating TreeTables in Swing</a>,
     <a
href="http://java.sun.com/products/jfc/tsc/articles/treetable2/index.html">Creating TreeTables: Part 2</a>
</td>
<td> Examples that combine a tree and table to show 
     detailed information about a hierarchy
     such as a file system.
     The tree is a renderer for the table.

</td>
</tr>
</table>



</blockquote>

<img src="../../images/blueline.gif" width="550" height="8" ALIGN="BOTTOM" NATURALSIZEFLAG="3">
<br>
<table width="550">
<tr>
<td align="left" valign="center">
<a href="spinner.html" target="_top"><img src="../../images/PreviousArrow.gif" width="26" height="26" align="center" border="0" alt="Previous Page"></a>
<a href="../TOC.html#components" target="_top"><img src="../../images/TOCIcon.gif" width="26" height="26" align="center" border="0" alt="Lesson Contents"></a>
<a href="text.html" target="_top"><img src="../../images/NextArrow.gif" width="26" height="26" align="center" border="0" alt="Next Page"></a></td>

<td align="center" valign="center">
<font size="-1">
<a href="../../index.html" target="_top">Start of Tutorial</a>
&gt;
<a href="../index.html" target="_top">Start of Trail</a>
&gt;
<a href="index.html" target="_top">Start of Lesson</a>
</font>
</td>

<td align="right" valign="center">
<font size="-1">
<a href="../../search.html" target="_top">Search</a>
<br><a href="../../forms/sendusmail.html">Feedback Form</a>
</font>
</td>

</tr>
</table>
<p>
<font size="-1">
<a href="../../information/copyright.html">Copyright</a>
1995-2002 Sun Microsystems, Inc.  All rights reserved.
</font>
</p>
</body>
</html>

